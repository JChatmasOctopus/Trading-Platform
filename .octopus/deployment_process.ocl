step "deploy-container" {
    name = "Deploy Container"
    properties = {
        Octopus.Action.TargetRoles = "trading-platform"
    }

    action {
        action_type = "Octopus.KubernetesDeployContainers"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress,Octopus.Features.KubernetesConfigMap,Octopus.Features.KubernetesSecret"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.Containers = "[{\"Args\":[],\"Command\":[],\"ConfigMapEnvFromSource\":[],\"ConfigMapEnvironmentVariables\":[],\"CreateFeedSecrets\":\"False\",\"EnvironmentVariables\":[{\"key\":\"PORT\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"#{Kubernetes.Deployment.Port}\",\"valueError\":null},{\"key\":\"UDL_SETVALUE_1\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"[/usr/share/nginx/html/config.json][productEndpoint]/#{Octopus.Action.Kubernetes.Namespace}/api/products\",\"valueError\":null},{\"key\":\"UDL_SETVALUE_2\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"[/usr/share/nginx/html/config.json][productHealthEndpoint]/#{Octopus.Action.Kubernetes.Namespace}/health/products\",\"valueError\":null},{\"key\":\"UDL_SETVALUE_3\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"[/usr/share/nginx/html/config.json][auditEndpoint]/#{Octopus.Action.Kubernetes.Namespace}/api/audits\",\"valueError\":null},{\"key\":\"UDL_SETVALUE_4\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"[/usr/share/nginx/html/config.json][auditHealthEndpoint]/#{Octopus.Action.Kubernetes.Namespace}/health/audits\",\"valueError\":null}],\"FieldRefEnvironmentVariables\":[],\"Lifecycle\":{\"PostStart\":null,\"PreStop\":null},\"LivenessProbe\":{\"exec\":{\"command\":[]},\"failureThreshold\":\"\",\"httpGet\":{\"host\":\"\",\"httpHeaders\":[],\"path\":\"\",\"port\":\"\",\"scheme\":\"\"},\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"tcpSocket\":{\"host\":\"\",\"port\":\"\"},\"timeoutSeconds\":\"\",\"type\":\"\"},\"Name\":\"web\",\"Ports\":[{\"key\":\"web\",\"keyError\":null,\"option\":\"TCP\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"#{Kubernetes.Deployment.Port}\",\"valueError\":null}],\"ReadinessProbe\":{\"exec\":{\"command\":[]},\"failureThreshold\":\"\",\"httpGet\":{\"host\":\"\",\"httpHeaders\":[],\"path\":\"\",\"port\":\"\",\"scheme\":\"\"},\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"tcpSocket\":{\"host\":\"\",\"port\":\"\"},\"timeoutSeconds\":\"\",\"type\":\"\"},\"Resources\":{\"limits\":{\"amdGpu\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"memory\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"},\"requests\":{\"amdGpu\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"memory\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"}},\"SecretEnvFromSource\":[],\"SecretEnvironmentVariables\":[],\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"capabilities\":{\"add\":[],\"drop\":[\"ALL\"]},\"privileged\":\"\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"True\",\"runAsUser\":\"\",\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}},\"StartupProbe\":{\"exec\":{\"command\":[]},\"failureThreshold\":\"\",\"httpGet\":{\"host\":\"\",\"httpHeaders\":[],\"path\":\"\",\"port\":\"\",\"scheme\":\"\"},\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"tcpSocket\":{\"host\":\"\",\"port\":\"\"},\"timeoutSeconds\":\"\",\"type\":\"\"},\"TerminationMessagePath\":\"\",\"TerminationMessagePolicy\":\"\",\"VolumeMounts\":[]}]"
            Octopus.Action.KubernetesContainers.DeploymentName = "#{Kubernetes.Deployment.Name}"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[{\"key\":\"nginx.ingress.kubernetes.io/rewrite-target\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"$1\",\"valueError\":null},{\"key\":\"nginx.ingress.kubernetes.io/use-regex\",\"keyError\":null,\"option\":\"\",\"option2\":\"\",\"option2Error\":null,\"optionError\":null,\"value\":\"true\",\"valueError\":null}]"
            Octopus.Action.KubernetesContainers.IngressClassName = "nginx"
            Octopus.Action.KubernetesContainers.IngressName = "#{Kubernetes.Ingress.Name}"
            Octopus.Action.KubernetesContainers.IngressRules = "[{\"host\":\"\",\"http\":{\"paths\":[{\"key\":\"#{Kubernetes.Ingress.Path}\",\"option\":\"\",\"option2\":\"ImplementationSpecific\",\"value\":\"web\"}]}}]"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.Replicas = "1"
            Octopus.Action.KubernetesContainers.ServiceName = "#{Kubernetes.Service.Name}"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServicePorts = "[{\"name\":\"web\",\"nodePort\":\"\",\"port\":\"80\",\"protocol\":\"TCP\",\"targetPort\":\"web\"}]"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "gcp-worker-pool"

        packages "web" {
            acquisition_location = "NotAcquired"
            feed = "#{Kubernetes.Deployment.Feed}"
            package_id = "#{Kubernetes.Deployment.Image}"
            properties = {
                Extract = "False"
                PackageParameterName = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "smoke-test" {
    name = "Smoke Test"
    properties = {
        Octopus.Action.TargetRoles = "trading-platform"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl get ingress --all-namespaces
                
                kubectl get ingress audits -o json -n default
                
                SERVICE_NAME=$(get_octopusvariable "Kubernetes.Deployment.Name")
                NAMESPACE="default" # Change this if your service is in a different namespace
                
                # Logging: Start checking
                echo "Checking for service '$SERVICE_NAME' in namespace '$NAMESPACE'..."
                
                # Attempt to retrieve the specified service's details
                SERVICE_DETAILS=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.metadata.name} {.spec.ports[0].port} {.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
                
                # Check if the service was found
                if [ -z "$SERVICE_DETAILS" ]; then
                    echo "Service '$SERVICE_NAME' not found in namespace '$NAMESPACE'."
                else
                    # Splitting service details into array to access individual elements
                    IFS=' ' read -ra DETAILS <<< "$SERVICE_DETAILS"
                    SERVICE_NAME_FOUND="${DETAILS[0]}"
                    SERVICE_PORT="${DETAILS[1]}"
                    SERVICE_EXTERNAL_IP="${DETAILS[2]}"
                
                    # Logging: Service found
                    echo "Service '$SERVICE_NAME_FOUND' found."
                    
                    # Check if an external IP is assigned and display appropriate message
                    if [ -z "$SERVICE_EXTERNAL_IP" ]; then
                        echo "Service port: $SERVICE_PORT. No external IP assigned."
                    else
                        echo "Service port: $SERVICE_PORT. External IP: $SERVICE_EXTERNAL_IP."
                    fi
                fi
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "gcp-worker-pool"
    }
}

step "security-scan" {
    name = "Security Scan"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                echo "Pulling Trivy Docker Image"
                echo "##octopus[stdout-verbose]"
                docker pull aquasec/trivy
                echo "##octopus[stdout-default]"
                  
                echo "Installing umoci"
                echo "##octopus[stdout-verbose]"
                # Install umoci
                if ! which umoci
                then
                  curl -o umoci -L https://github.com/opencontainers/umoci/releases/latest/download/umoci.amd64 2>&1
                  chmod +x umoci
                fi
                echo "##octopus[stdout-default]"
                  
                echo "Extracting Application Docker Image"
                echo "##octopus[stdout-verbose]"
                # Download and extract the docker image
                # https://manpages.ubuntu.com/manpages/jammy/man1/umoci-raw-unpack.1.html
                docker pull quay.io/skopeo/stable:latest 2>&1
                docker run -v $(pwd):/output quay.io/skopeo/stable:latest copy docker://#{Octopus.Action[Deploy Container].Package[web].PackageId}:#{Octopus.Action[Deploy Container].Package[web].PackageVersion} oci:/output/image:latest 2>&1
                ./umoci unpack --image image --rootless bundle 2>&1
                echo "##octopus[stdout-default]"
                
                # Find the bom.json file in the unpacked image directory
                BOM_JSON_PATH=$(find ./bundle -name "bom.json" -print -quit)
                OCTOPUS_HOME_DIR="/home/Octopus"
                
                # Check if bom.json was found and create an Octopus Deploy artifact
                if [[ -n "$BOM_JSON_PATH" ]]; then
                    echo "Found bom.json at $BOM_JSON_PATH"
                    
                    cp "$BOM_JSON_PATH" "$OCTOPUS_HOME_DIR/bom.json"
                    
                    new_octopusartifact "$OCTOPUS_HOME_DIR/bom.json" "bom.json"
                else
                    echo "bom.json not found in the unpacked image."
                fi
                  
                TIMESTAMP=$(date +%s%3N)
                SUCCESS=0
                for x in $(find . -name bom.json -type f -print); do
                    echo "Scanning ${x}"
                  
                    # Delete any existing report file
                    if [[ -f "$PWD/depscan-bom.json" ]]; then
                      rm "$PWD/depscan-bom.json"
                    fi
                  
                    # Generate the report, capturing the output, and ensuring $? is set to the exit code
                    OUTPUT=$(bash -c "docker run --rm -v \"$PWD:/app\" aquasec/trivy sbom \"/app/${x}\"; exit \$?" 2>&1)
                  
                    # Success is set to 1 if the exit code is not zero
                    if [[ $? -ne 0 ]]; then
                        SUCCESS=1
                    fi
                  
                    # Print the output stripped of ANSI colour codes
                    echo -e "${OUTPUT}" | sed 's/\x1b\[[0-9;]*m//g'
                done
                  
                set_octopusvariable "VerificationResult" $SUCCESS
                  
                if [[ $SUCCESS -ne 0 ]]; then
                  >&2 echo "Critical vulnerabilities were detected"
                fi
                  
                exit 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "gcp-worker-pool"
    }
}

step "feedback" {
    condition = "Always"
    name = "Feedback"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Highlight \"Please share your feedback on this step in our GitHub discussion at [https://oc.to/CfiezA](https://oc.to/CfiezA).\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}
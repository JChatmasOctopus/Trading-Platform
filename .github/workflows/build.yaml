name: CI - Trading Platform

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  push_to_registry:
    name: Build & Push Containers
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version-generator.outputs.version }}
      
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          
      - name: Set Version Number
        id: version-generator
        run: echo "version=$(date +'%Y.%m.%d').$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: 5.x

      - name: Install CycloneDX
        run: npm install --global @cyclonedx/cyclonedx-npm
        shell: bash

      # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
      # into the application.
      - name: Generate SBOM
        run: cyclonedx-npm --ignore-npm-errors --output-file bom.json
        shell: bash

      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          additionalArguments: /overrideconfig mode=Mainline

      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # To log into a third party registry, set the registry key below.

          # This is the GitHub Container Registry
          #registry: ghcr.io

          # This is GitLab
          #registry: registry.gitlab.com

          # This is the Azure Container Registry
          #registry: <registry-name>.azurecr.io

          # This is the Google Container Registry
          #registry: gcr.io

          # These credentials assume existing secrets for DockerHub
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Change this to "true" when you are sure the tag is unique. It is set to false
          # to ensure that existing images are not overwritten unintentionally.
          push: false
          tags: jchatmas/new-name:${{ steps.determine_version.outputs.semVer }}
    
      - name: Package Trading Platform
        run: |
          octo pack --id="TradingPlatform.Service" --format="Zip" --version="${{ steps.version-generator.outputs.version }}" --basePath="$GITHUB_WORKSPACE/src" --outFolder="$GITHUB_WORKSPACE/artifacts"

      - name: Push Trading Platform Packages
        uses: OctopusDeploy/push-package-action@v1.1.1
        with:
          api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
          server: "https://demo.octopus.app"
          space: "Trading Team"
          packages: |
            artifacts/TradingPlatform.Service.${{ steps.version-generator.outputs.version }}.zip
          
  Push-build-information:
       
      name: üêô Push Build Information
      needs: push_to_registry 
      runs-on: ubuntu-latest
      
      env:
        OCTOPUS_URL: "https://demo.octopus.app"
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_TOKEN }}
        OCTOPUS_SPACE: "Trading Team"
      
      steps:
      - uses: OctopusDeploy/push-build-information-action@v3
        name: Push Build Information
        with:
          version: ${{ needs.push_to_registry.outputs.version }}
          packages: |
            TradingPlatform.Service
    
  Create-Octopus-Release:
  
      name: üêô Create Octopus Release
      needs: [push_to_registry, Push-build-information]
      runs-on: ubuntu-latest
      
      env:
        OCTOPUS_URL: "https://demo.octopus.app"
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_TOKEN }}
        OCTOPUS_SPACE: "Trading Team"
        
      steps:
      - uses: OctopusDeploy/create-release-action@v3
        id: "create-release"
        with:
          project: "-Orchestrator-"
      outputs: 
       release_number: ${{ steps.create-release.outputs.release_number }}
